const isOverlapping=(t,e)=>{t.length&&1<t.length&&(t=t[0]),e.length&&1<e.length&&(e=e[0]);t=t instanceof Element&&t.getBoundingClientRect(),e=e instanceof Element&&e.getBoundingClientRect();let n=!1;return t&&e?n=!(t.right<e.left||t.left>e.right||t.bottom<e.top||t.top>e.bottom):console.warn("Please provide valid HTMLElement object"),n},goingOutAnimation=()=>{let t=document.querySelectorAll("*[data-overlap]");t.forEach((i,t)=>{var r=i.dataset.overlap,l=i.dataset.target,s=i.dataset.option,c=i.dataset.inColor,d=i.dataset.OutColor,g=i.dataset.inOption,u=i.dataset.outOption;if(r)if(l){var p=isOverlapping(i,document.querySelector(`#${r}`));let t=i.className.split(" ");var f=t.findIndex(t=>"in-container"===t),r=t.findIndex(t=>"out-container"===t);let e=!0,n=!0;console.log(),p&&-1===f&&(e=!1,i.classList.add("in-container"),-1<r&&(n=!0,i.classList.remove("out-container"))),p||-1!==r||(n=!1,i.classList.add("out-container"),-1<f&&(e=!0,i.classList.remove("in-container")));let o={targets:`.${l}`,color:`${d||"#222222"}`,duration:2e3},a={targets:`.${l}`,color:`${c||"#ffffff"}`,duration:2e3};s&&(u&&g?(o={targets:`.${l}`,[s]:`${u}`,duration:2e3},a={targets:`.${l}`,[s]:`${g}`,duration:2e3}):console.error("no dataOutOption or/and dataInOption option given")),p||n||anime(o),p&&!e&&anime(a)}else console.error("no target element given");else console.error("no overlap element given")})};