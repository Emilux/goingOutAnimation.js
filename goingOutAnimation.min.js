class GoingOutAnimation{constructor(e){this.selector={elements:document.querySelectorAll(e.selector)},this.containers=e.containers}run(){this.selector.elements&&this.selector.elements.forEach(((e,t)=>{if(this.containers){const n=this.containers.filter((t=>{const{selector:n}=t,s=document.querySelectorAll(n);return!!s&&[...s].find((t=>this.isOverlapping(e,t)))}));this.selector.attributes={...this.selector.attributes,[t]:{target:e,overlappingElements:n,isInContainer:n&&n.length>0,isOutContainer:!n||0===n.length}},this.toggleElementClasses(this.selector.attributes[t])}}))}toggleElementClasses(e){e.target.classList;e.isInContainer?this.inElementClasses(e):this.outElementClasses(e)}inElementClasses(e){const t=e.target.classList;t.add("in-container"),t.remove("out-container"),e.overlappingElements.forEach((e=>{e.id&&t.add(`in-container-${e.id}`)}))}outElementClasses(e){const t=e.target.classList;t.add("out-container"),t.remove("in-container"),e.target.className=e.target.className.replaceAll(/\bin-container-.*/g,"")}isOverlapping(e,t){e.length&&e.length>1&&(e=e[0]),t.length&&t.length>1&&(t=t[0]);const n=e instanceof Element&&e.getBoundingClientRect(),s=t instanceof Element&&t.getBoundingClientRect();let i=!1;return n&&s?(i=!(n.right<s.left||n.left>s.right||n.bottom<s.top||n.top>s.bottom),i):(console.warn("Please provide valid HTMLElement object"),i)}}
